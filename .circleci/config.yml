defaults: &defaults
  docker:
  - image: timjdfletcher/infrabox
  working_directory: /home/circleci/project

version: 2
jobs:
 dummy:
    <<: *defaults
    steps:
    - run:
        command: echo "hello world"

 firstTimeSetup:
   <<: *defaults
   steps:
   - checkout
   - run:
       command: source /okta_venv/bin/activate;
               ./scripts/create_tf_state_bucket.sh $TRAINING_COHORT;
               ./scripts/create_key_pair.sh $TRAINING_COHORT;
               ./scripts/create_tf_state_bucket.sh $TEST_COHORT;
               ./scripts/run_terraform.sh $TRAINING_COHORT base_networking apply -input=false -auto-approve;
               ./scripts/run_terraform.sh $TRAINING_COHORT bastion apply -input=false -auto-approve;

 buildTestEnvironment:
   <<: *defaults
   steps:
     - checkout
     - run:
         command: source /okta_venv/bin/activate;
                  ./scripts/run_terraform.sh $TEST_COHORT training_bucket apply -input=false -auto-approve;
                  ./scripts/run_terraform.sh $TEST_COHORT training_emr_cluster apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT training_kafka apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT ingester apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT monitoring_dashboard apply -input=false -auto-approve -var "env=test";

 buildProductionEnvironment:
     <<: *defaults
     steps:
     - checkout
     - run:
         command: source /okta_venv/bin/activate;
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket apply -input=false -auto-approve;
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT ingester apply -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard apply -input=false -auto-approve -var "env=prod";

 buildClientVPN:
     <<: *defaults
     steps:
     - checkout
     - run:
         command: source /okta_venv/bin/activate;
                  ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn apply -input=false -auto-approve;

 buildAMIs:
     <<: *defaults
     steps:
     - checkout
     - run:
         command: source /okta_venv/bin/activate;
                 ./scripts/build_ami.sh training_kafka ;
                 ./scripts/build_ami.sh training_ingester ;

 destroyProductionEnvironment:
     <<: *defaults
     steps:
     - checkout
     - run:
         command: source /okta_venv/bin/activate;
                 ./scripts/run_terraform.sh $TRAINING_COHORT monitoring_dashboard destroy -input=false -auto-approve -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT ingester destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_kafka destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_emr_cluster destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=prod";
                 ./scripts/run_terraform.sh $TRAINING_COHORT training_bucket destroy -input=false -auto-approve;


destroyTestEnvironment:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
                  ./scripts/run_terraform.sh $TEST_COHORT monitoring_dashboard destroy -input=false -auto-approve -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT ingester destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT training_kafka destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT training_emr_cluster destroy -input=false -auto-approve -var-file=prod-env.tfvars -var "default_cohort=$TRAINING_COHORT" -var "env=test";
                  ./scripts/run_terraform.sh $TEST_COHORT training_bucket destroy -input=false -auto-approve;

destroyBaseNetwork:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
                  ./scripts/run_terraform.sh $TRAINING_COHORT bastion destroy -input=false -auto-approve;
                  ./scripts/run_terraform.sh $TRAINING_COHORT base_networking destroy -input=false -auto-approve;

destroyClientVPN:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: source /okta_venv/bin/activate;
                   ./scripts/run_terraform.sh $TRAINING_COHORT client_vpn destroy -input=false -auto-approve;

workflows:
  version: 2
  build:
    jobs:
      - dummy
      - approvefirstTimeSetup:
          type: approval
          requires:
            - dummy
      - firstTimeSetup:
          requires:
            - approvefirstTimeSetup

      - approvebuildAMIs:
          type: approval
          requires:
            - dummy
      - buildAMIs:
          requires:
            - approvebuildAMIs

      - approveBuildTestEnvironment:
          type: approval
          requires:
            - dummy
      - buildTestEnvironment:
          requires:
            - approveBuildTestEnvironment


      - approveBuildProductionEnvironment:
          type: approval
          requires:
            - dummy

      - buildProductionEnvironment:
          requires:
            - approveBuildProductionEnvironment

      - approvebuildClientVPN:
          type: approval
          requires:
            - dummy
      - buildClientVPN:
          requires:
            - approvebuildClientVPN

      - approvedestroyClientVPN:
          type: approval
          requires:
            - dummy
      - destroyClientVPN:
          requires:
            - approvedestroyClientVPN

      - approveDestroyTestEnvironment:
          type: approval
          requires:
            - dummy
      - destroyTestEnvironment:
          requires:
            - approveDestroyTestEnvironment

      - approveDestroyProductionEnvironment:
          type: approval
          requires:
            - dummy
      - destroyProductionEnvironment:
          requires:
            - approveDestroyProductionEnvironment
